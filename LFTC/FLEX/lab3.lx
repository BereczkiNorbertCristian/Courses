%{
#include<stdlib.h>
#include<string.h>
#include<math.h>

typedef struct{
	int id1;
	int id2;
}PIF;

typedef struct{
	char name[10];
}TSiden;

int pifLength = 0;
int constLength = 0;
int identifierLength = 0;
int identifierCode = 0;
int constCode = 1;
PIF program[300];

TSiden TSidentifier[30];

TSiden TSconstants[30];

void addPIF(int id1,int id2){
	program[pifLength].id1 = id1;
	program[pifLength].id2 = id2;
	++pifLength;
}

void addConst(char* atom){
	int found = 0;
	int i ;
	for(int i=0;i<constLength;++i){
		if(strcmp(TSconstants[i].name, atom) == 0){
			found = 1;
			addPIF(constCode,i);
		}
	}
	if(found == 0){
		strcpy(TSconstants[constLength].name,atom);
		addPIF(constCode,constLength);
		++constLength;
	}
}

void addIdentifier(char *atom){
	int found = 0;
	int i =0;
	while(i < identifierLength){
		int res = strcmp(TSidentifier[i].name,atom);
		if(res == 0){
			found = 1;
			addPIF(identifierCode,i);
		}
		++i;
	}
	if(found == 0){
		strcpy(TSidentifier[identifierLength].name,atom);
		addPIF(identifierCode,identifierLength);
		identifierLength++;
	}
}

void showPIF(){
	printf("PIF:\n");
	int t;
	for(t = 0; t < pifLength;++t){
		if(program[t].id1 != identifierCode && program[t].id1 != constCode){
			printf(" %d|- ",program[t].id1);
		}
		else{
			printf(" %d|%d ",program[t].id1,program[t].id2);
		}
	}
}

void showConst(){
	printf("Constants: \n");
	for(int i=0;i<constLength;++i){
		printf(" %s|%d",TSconstants[i].name,i);
	}
	printf("\n");
}

void showId(){
    printf("Identifier\n");
    for(int i = 0 ;i<identifierLength;++i)
        printf(" %s|%d", TSidentifier[i].name , i);
    printf("\n");
}

void show(){
	showConst();
	showId();
	showPIF();
}
%}

%option noyywrap
WITHZERO		[0-9]
DIGIT			[1-9]
DIGITS			{DIGIT}{WITHZERO}*|0
ID 				[a-z]


%%
{DIGITS}		addConst(yytext);

\identifier 			addPIF(0,0);
\constant 				addPIF(1,0);
function				addPIF(2,0);
struct					addPIF(3,0);
define					addPIF(4,0);
done					addPIF(5,0);
doif					addPIF(6,0);
dorepeat				addPIF(7,0);
int 					addPIF(8,0);
float 					addPIF(9,0);
scanIO 					addPIF(10,0);
putIO 					addPIF(11,0);
\( 						addPIF(12,0);
\)						addPIF(13,0);
\, 						addPIF(14,0);
\+ 						addPIF(15,0);
\*						addPIF(16,0);
\/						addPIF(17,0);
\-						addPIF(18,0);
\=						addPIF(19,0);
\>						addPIF(20,0);
\>=						addPIF(21,0);
\==						addPIF(22,0);
\!=						addPIF(23,0);
\<						addPIF(24,0);
\<=						addPIF(25,0);
\.						addPIF(26,0);
\;						addPIF(27,0);
\or						addPIF(28,0);
\and 					addPIF(29,0);
\:						addPIF(30,0);
\%						addPIF(31,0);
{ID}+					addIdentifier(yytext);

[ \t\n]+					;/* eat up whitespace */
. {
	if(yytext[0] != 13){
	printf("illegal token %s and %d !\n",yytext,yytext[0]);
	}
}
%%
main (argc,argv)
int argc;
char **argv;
{
	++argv;--argc;
	if( argc > 0)
		yyin = fopen(argv[0],"r");
	else
		yyin = stdin;
	yylex();
	show();
}